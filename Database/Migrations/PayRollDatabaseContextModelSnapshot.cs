// <auto-generated />
using System;
using Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fridge.Migrations
{
    [DbContext(typeof(PayRollDatabaseContext))]
    partial class PayRollDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Database.Models.Payroll.BankDetail", b =>
                {
                    b.Property<Guid>("BankDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("account_number");

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("branch_code");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_holder");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<double>("SplitPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(100.0)
                        .HasColumnName("split");

                    b.HasKey("BankDetailId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("bank_details");
                });

            modelBuilder.Entity("Database.Models.Payroll.EmployeePayroll", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_id");

                    b.Property<Guid>("PayrollId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("payroll_id");

                    b.Property<Guid>("PaySpecificationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("pay_spec_id");

                    b.HasKey("EmployeeId", "PayrollId", "PaySpecificationId");

                    b.HasIndex("PaySpecificationId")
                        .IsUnique();

                    b.HasIndex("PayrollId");

                    b.ToTable("employee_payroll");
                });

            modelBuilder.Entity("Database.Models.Payroll.Organisation", b =>
                {
                    b.Property<Guid>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("OrganisationId");

                    b.ToTable("organisations");
                });

            modelBuilder.Entity("Database.Models.Payroll.PaySpecification", b =>
                {
                    b.Property<Guid>("PaySpecificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<double>("BaseAmount")
                        .HasColumnType("float")
                        .HasColumnName("base_amt");

                    b.Property<int>("Period")
                        .HasColumnType("int")
                        .HasColumnName("period");

                    b.HasKey("PaySpecificationId");

                    b.ToTable("pay_specs");
                });

            modelBuilder.Entity("Database.Models.Payroll.Payroll", b =>
                {
                    b.Property<Guid>("PayrollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastRunDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_run");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("organisation");

                    b.Property<int>("PayRunDate")
                        .HasColumnType("int")
                        .HasColumnName("pay_date");

                    b.Property<bool>("SoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("PayrollId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("payrolls");
                });

            modelBuilder.Entity("Database.Models.Payroll.PayrollValue", b =>
                {
                    b.Property<Guid>("PayrollValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<double>("EmployeeContribution")
                        .HasColumnType("float")
                        .HasColumnName("e_contribution");

                    b.Property<double>("OrganisationContribution")
                        .HasColumnType("float")
                        .HasColumnName("o_contribution");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reference");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PayrollValueId");

                    b.ToTable("pay_values");

                    b.HasDiscriminator<string>("type").HasValue("PayrollValue");
                });

            modelBuilder.Entity("Database.Models.Payroll.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("CellNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cell");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("dob");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email_address");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("home_address");

                    b.Property<string>("HomeTelephone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("home_tel");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int")
                        .HasColumnName("marital_status");

                    b.Property<string>("Names")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("names");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("national_id");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("passport_id");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("postal_address");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("surname");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("people");

                    b.HasDiscriminator<string>("type").HasValue("Person");
                });

            modelBuilder.Entity("Database.Models.Payroll.Spouse", b =>
                {
                    b.Property<Guid>("SpouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("EmployeeSpouseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee");

                    b.Property<string>("Names")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("names");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("national_id");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("surname");

                    b.HasKey("SpouseId");

                    b.HasIndex("EmployeeSpouseId");

                    b.ToTable("spouses");
                });

            modelBuilder.Entity("Database.Models.Payroll.Deduction", b =>
                {
                    b.HasBaseType("Database.Models.Payroll.PayrollValue");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("d_employee");

                    b.Property<Guid>("PaySpecificationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("d_pay_spec");

                    b.Property<Guid>("PayrollId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("d_payroll");

                    b.HasIndex("EmployeeId", "PayrollId", "PaySpecificationId");

                    b.HasDiscriminator().HasValue("d");
                });

            modelBuilder.Entity("Database.Models.Payroll.Earning", b =>
                {
                    b.HasBaseType("Database.Models.Payroll.PayrollValue");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("e_employee");

                    b.Property<Guid>("PaySpecificationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("e_pay_spec");

                    b.Property<Guid>("PayrollId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("e_payroll");

                    b.HasIndex("EmployeeId", "PayrollId", "PaySpecificationId");

                    b.HasDiscriminator().HasValue("e");
                });

            modelBuilder.Entity("Database.Models.Payroll.Employee", b =>
                {
                    b.HasBaseType("Database.Models.Payroll.Person");

                    b.Property<DateTime>("DateHired")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_hired");

                    b.Property<int>("EmploymentStatus")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("position");

                    b.HasDiscriminator().HasValue("e");
                });

            modelBuilder.Entity("Database.Models.Payroll.BankDetail", b =>
                {
                    b.HasOne("Database.Models.Payroll.Employee", "Employee")
                        .WithMany("BankDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Database.Models.Payroll.EmployeePayroll", b =>
                {
                    b.HasOne("Database.Models.Payroll.Employee", "Employee")
                        .WithMany("PayRolls")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Database.Models.Payroll.PaySpecification", "PaySpecification")
                        .WithOne("Payroll")
                        .HasForeignKey("Database.Models.Payroll.EmployeePayroll", "PaySpecificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Database.Models.Payroll.Payroll", "Payroll")
                        .WithMany("Employees")
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Payroll");

                    b.Navigation("PaySpecification");
                });

            modelBuilder.Entity("Database.Models.Payroll.Payroll", b =>
                {
                    b.HasOne("Database.Models.Payroll.Organisation", "Organisation")
                        .WithMany("PayRolls")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Database.Models.Payroll.Spouse", b =>
                {
                    b.HasOne("Database.Models.Payroll.Employee", "Employee")
                        .WithMany("Spouses")
                        .HasForeignKey("EmployeeSpouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Database.Models.Payroll.Deduction", b =>
                {
                    b.HasOne("Database.Models.Payroll.EmployeePayroll", "AssociatedPayroll")
                        .WithMany("Deductions")
                        .HasForeignKey("EmployeeId", "PayrollId", "PaySpecificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AssociatedPayroll");
                });

            modelBuilder.Entity("Database.Models.Payroll.Earning", b =>
                {
                    b.HasOne("Database.Models.Payroll.EmployeePayroll", "AssociatedPayroll")
                        .WithMany("Earnings")
                        .HasForeignKey("EmployeeId", "PayrollId", "PaySpecificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AssociatedPayroll");
                });

            modelBuilder.Entity("Database.Models.Payroll.EmployeePayroll", b =>
                {
                    b.Navigation("Deductions");

                    b.Navigation("Earnings");
                });

            modelBuilder.Entity("Database.Models.Payroll.Organisation", b =>
                {
                    b.Navigation("PayRolls");
                });

            modelBuilder.Entity("Database.Models.Payroll.PaySpecification", b =>
                {
                    b.Navigation("Payroll");
                });

            modelBuilder.Entity("Database.Models.Payroll.Payroll", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Database.Models.Payroll.Employee", b =>
                {
                    b.Navigation("BankDetails");

                    b.Navigation("PayRolls");

                    b.Navigation("Spouses");
                });
#pragma warning restore 612, 618
        }
    }
}
