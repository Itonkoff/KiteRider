// <auto-generated />
using System;
using Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fridge.Migrations
{
    [DbContext(typeof(PayRollDatabaseContext))]
    [Migration("20210728113031_EarningsDeductionsReestablished")]
    partial class EarningsDeductionsReestablished
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Database.Models.Payroll.BankDetail", b =>
                {
                    b.Property<Guid>("BankDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("account_number");

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("branch_code");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_holder");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<double>("SplitPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(100.0)
                        .HasColumnName("split");

                    b.HasKey("BankDetailId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("bank_details");
                });

            modelBuilder.Entity("Database.Models.Payroll.EmployeeContributoryDeduction", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("emp_id");

                    b.Property<Guid>("ContributoryDeductionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cd_id");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.HasKey("EmployeeId", "ContributoryDeductionId");

                    b.HasIndex("ContributoryDeductionId");

                    b.ToTable("EmployeeContributoryDeductions");
                });

            modelBuilder.Entity("Database.Models.Payroll.EmployeeImmediateEarning", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("emp_id");

                    b.Property<Guid>("ImmediateEarningId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ie_id");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.HasKey("EmployeeId", "ImmediateEarningId");

                    b.HasIndex("ImmediateEarningId");

                    b.ToTable("EmployeeImmediateEarnings");
                });

            modelBuilder.Entity("Database.Models.Payroll.EmployeePayroll", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("emp_id");

                    b.Property<Guid>("PayrollId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("roll_id");

                    b.HasKey("EmployeeId", "PayrollId");

                    b.HasIndex("PayrollId");

                    b.ToTable("employee_payroll");
                });

            modelBuilder.Entity("Database.Models.Payroll.EmployeePeriodicEarning", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("emp_id");

                    b.Property<Guid>("PeriodicEarningId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("pe_id");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.HasKey("EmployeeId", "PeriodicEarningId");

                    b.HasIndex("PeriodicEarningId");

                    b.ToTable("EmployeePeriodicEarnings");
                });

            modelBuilder.Entity("Database.Models.Payroll.EmployeeSingleFundedDeduction", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("emp_id");

                    b.Property<Guid>("SingleFundedDeductionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("sd_id");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.HasKey("EmployeeId", "SingleFundedDeductionId");

                    b.HasIndex("SingleFundedDeductionId");

                    b.ToTable("EmployeeSingleFundedDeductions");
                });

            modelBuilder.Entity("Database.Models.Payroll.Organisation", b =>
                {
                    b.Property<Guid>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("CountryOfOrigin")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("country");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reg_number");

                    b.HasKey("OrganisationId");

                    b.ToTable("organisations");
                });

            modelBuilder.Entity("Database.Models.Payroll.Payroll", b =>
                {
                    b.Property<Guid>("PayrollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastRunDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_run");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("int")
                        .HasColumnName("nu_emp");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("organisation");

                    b.Property<int>("PayRunDate")
                        .HasColumnType("int")
                        .HasColumnName("pay_date");

                    b.Property<bool>("SoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("PayrollId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("payrolls");
                });

            modelBuilder.Entity("Database.Models.Payroll.PayrollValue", b =>
                {
                    b.Property<Guid>("PayrollValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<Guid>("PayrollId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reference");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PayrollValueId");

                    b.ToTable("pay_values");

                    b.HasDiscriminator<string>("type").HasValue("PayrollValue");
                });

            modelBuilder.Entity("Database.Models.Payroll.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("CellNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cell");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("dob");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email_address");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("home_address");

                    b.Property<string>("HomeTelephone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("home_tel");

                    b.Property<string>("Names")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("names");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("national_id");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("passport_id");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("postal_address");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("surname");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("people");

                    b.HasDiscriminator<string>("type").HasValue("Person");
                });

            modelBuilder.Entity("Database.Models.Payroll.ContributoryDeduction", b =>
                {
                    b.HasBaseType("Database.Models.Payroll.PayrollValue");

                    b.Property<double>("EmployeeContribution")
                        .HasColumnType("float")
                        .HasColumnName("emp_cont");

                    b.Property<double>("OrganisationContribution")
                        .HasColumnType("float")
                        .HasColumnName("org_cont");

                    b.HasIndex("PayrollId");

                    b.HasDiscriminator().HasValue("cd");
                });

            modelBuilder.Entity("Database.Models.Payroll.ImmediateEarning", b =>
                {
                    b.HasBaseType("Database.Models.Payroll.PayrollValue");

                    b.HasIndex("PayrollId");

                    b.HasDiscriminator().HasValue("ie");
                });

            modelBuilder.Entity("Database.Models.Payroll.PeriodicEarning", b =>
                {
                    b.HasBaseType("Database.Models.Payroll.PayrollValue");

                    b.Property<int>("Period")
                        .HasColumnType("int")
                        .HasColumnName("period");

                    b.HasIndex("PayrollId");

                    b.HasDiscriminator().HasValue("pe");
                });

            modelBuilder.Entity("Database.Models.Payroll.SingleFundedDeduction", b =>
                {
                    b.HasBaseType("Database.Models.Payroll.PayrollValue");

                    b.HasIndex("PayrollId");

                    b.HasDiscriminator().HasValue("sd");
                });

            modelBuilder.Entity("Database.Models.Payroll.Employee", b =>
                {
                    b.HasBaseType("Database.Models.Payroll.Person");

                    b.Property<DateTime>("DateHired")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_hired");

                    b.Property<int>("EmploymentStatus")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int")
                        .HasColumnName("marital_status");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("position");

                    b.HasDiscriminator().HasValue("emp");
                });

            modelBuilder.Entity("Database.Models.Payroll.Spouse", b =>
                {
                    b.HasBaseType("Database.Models.Payroll.Person");

                    b.Property<Guid?>("EmployeeSpouseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("emp");

                    b.HasIndex("EmployeeSpouseId");

                    b.HasDiscriminator().HasValue("sps");
                });

            modelBuilder.Entity("Database.Models.Payroll.BankDetail", b =>
                {
                    b.HasOne("Database.Models.Payroll.Employee", "Employee")
                        .WithMany("BankDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Database.Models.Payroll.EmployeeContributoryDeduction", b =>
                {
                    b.HasOne("Database.Models.Payroll.ContributoryDeduction", "Deduction")
                        .WithMany("Employees")
                        .HasForeignKey("ContributoryDeductionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Database.Models.Payroll.Employee", "Employee")
                        .WithMany("ContributoryDeductions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Deduction");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Database.Models.Payroll.EmployeeImmediateEarning", b =>
                {
                    b.HasOne("Database.Models.Payroll.Employee", "Employee")
                        .WithMany("ImmediateEarnings")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Database.Models.Payroll.ImmediateEarning", "Earning")
                        .WithMany("Employees")
                        .HasForeignKey("ImmediateEarningId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Earning");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Database.Models.Payroll.EmployeePayroll", b =>
                {
                    b.HasOne("Database.Models.Payroll.Employee", "Employee")
                        .WithMany("PayRolls")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Database.Models.Payroll.Payroll", "Payroll")
                        .WithMany("Employees")
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Payroll");
                });

            modelBuilder.Entity("Database.Models.Payroll.EmployeePeriodicEarning", b =>
                {
                    b.HasOne("Database.Models.Payroll.Employee", "Employee")
                        .WithMany("PeriodicEarnings")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Database.Models.Payroll.PeriodicEarning", "Earning")
                        .WithMany("Employees")
                        .HasForeignKey("PeriodicEarningId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Earning");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Database.Models.Payroll.EmployeeSingleFundedDeduction", b =>
                {
                    b.HasOne("Database.Models.Payroll.Employee", "Employee")
                        .WithMany("SingleFundedDeductions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Database.Models.Payroll.SingleFundedDeduction", "Deduction")
                        .WithMany("Employees")
                        .HasForeignKey("SingleFundedDeductionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Deduction");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Database.Models.Payroll.Payroll", b =>
                {
                    b.HasOne("Database.Models.Payroll.Organisation", "Organisation")
                        .WithMany("PayRolls")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Database.Models.Payroll.ContributoryDeduction", b =>
                {
                    b.HasOne("Database.Models.Payroll.Payroll", "AssociatedPayroll")
                        .WithMany("ContributoryDeductions")
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AssociatedPayroll");
                });

            modelBuilder.Entity("Database.Models.Payroll.ImmediateEarning", b =>
                {
                    b.HasOne("Database.Models.Payroll.Payroll", "AssociatedPayroll")
                        .WithMany("ImmediateEarnings")
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AssociatedPayroll");
                });

            modelBuilder.Entity("Database.Models.Payroll.PeriodicEarning", b =>
                {
                    b.HasOne("Database.Models.Payroll.Payroll", "AssociatedPayroll")
                        .WithMany("PeriodicEarnings")
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AssociatedPayroll");
                });

            modelBuilder.Entity("Database.Models.Payroll.SingleFundedDeduction", b =>
                {
                    b.HasOne("Database.Models.Payroll.Payroll", "AssociatedPayroll")
                        .WithMany("SingleFundedDeductions")
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AssociatedPayroll");
                });

            modelBuilder.Entity("Database.Models.Payroll.Spouse", b =>
                {
                    b.HasOne("Database.Models.Payroll.Employee", "Employee")
                        .WithMany("Spouses")
                        .HasForeignKey("EmployeeSpouseId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Database.Models.Payroll.Organisation", b =>
                {
                    b.Navigation("PayRolls");
                });

            modelBuilder.Entity("Database.Models.Payroll.Payroll", b =>
                {
                    b.Navigation("ContributoryDeductions");

                    b.Navigation("Employees");

                    b.Navigation("ImmediateEarnings");

                    b.Navigation("PeriodicEarnings");

                    b.Navigation("SingleFundedDeductions");
                });

            modelBuilder.Entity("Database.Models.Payroll.ContributoryDeduction", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Database.Models.Payroll.ImmediateEarning", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Database.Models.Payroll.PeriodicEarning", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Database.Models.Payroll.SingleFundedDeduction", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Database.Models.Payroll.Employee", b =>
                {
                    b.Navigation("BankDetails");

                    b.Navigation("ContributoryDeductions");

                    b.Navigation("ImmediateEarnings");

                    b.Navigation("PayRolls");

                    b.Navigation("PeriodicEarnings");

                    b.Navigation("SingleFundedDeductions");

                    b.Navigation("Spouses");
                });
#pragma warning restore 612, 618
        }
    }
}
